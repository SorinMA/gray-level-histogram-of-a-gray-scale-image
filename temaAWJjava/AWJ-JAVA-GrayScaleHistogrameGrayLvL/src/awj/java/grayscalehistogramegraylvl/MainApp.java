/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package awj.java.grayscalehistogramegraylvl;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import awj.java.grayscalehistogramegraylvl.histoLib.ShowHistoAndData;
import awj.java.grayscalehistogramegraylvl.imgProc.ConvertToGS;
import awj.java.grayscalehistogramegraylvl.imgProc.EQ;
import awj.java.grayscalehistogramegraylvl.imgProc.GaussianNoise;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author SorinM
 */
public class MainApp extends javax.swing.JFrame {

    
    protected long aux = 0;
    private File src;
    private File imgReduceNoiseFilter;
    private File imgGrayscaleFilter;
    
    protected long readTimeStart = 0;
    protected long readTimeEnd = 0;
    
    protected  BufferedImage bImageEqualize = new BufferedImage(100,100,
                                                  BufferedImage.TYPE_INT_RGB);
    
    private File dst = new File("C:\\Users\\Public\\Pictures"); // default path
    // for img saving
    protected ShowHistoAndData histo = new ShowHistoAndData(); // new histo obj
    /**
     * Creates new form MainApp
     */
    public MainApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Select image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Place to save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("RUN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "JPG & GIF Images", "jpg", "gif"); // specifica fomatul dorit pentru
        // fisierul pe care dorim sa l incarcam
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
             readTimeStart = System.nanoTime();
             this.src = fileChooser.getSelectedFile();
             System.out.println("Selected file: " + this.src.getAbsolutePath());
        }
        
        try {
        bImageEqualize = ImageIO.read(this.src);
        readTimeEnd = System.nanoTime();
        aux = ((readTimeEnd - readTimeStart)/ 1000000);
      
       //urmeaza sa afisam in aplicatie imaginea selectata + 
       // initializam campurile pentru time exec.
        jLabel1.setIcon(new ImageIcon(bImageEqualize.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH)));
        jLabel2.setText(histo.fLabelPrintData(aux));
        } catch (IOException e) {
             System.out.println("Exception occured :" + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
             this.dst = fileChooser.getSelectedFile();
             System.out.println("Selected file: " + this.dst.getAbsolutePath()+ " ||| " + this.dst.getName());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss");  
        LocalDateTime now = LocalDateTime.now();  
        System.out.println(dtf.format(now));  
        
         try
            {
                String whereToSave = this.dst.getAbsolutePath()+ "\\" + this.src.getName() + dtf.format(now)+"\\";
                System.out.println("|"+whereToSave);
                File theDir = new File(whereToSave);
                // if the directory does not exist, create it
                if (!theDir.exists()) {
                    System.out.println("creating directory: " + theDir.getName());
                    boolean result = false;
                    try {
                        theDir.mkdir();
                        result = true;
                    } 
                    catch(SecurityException se) {
        //handle it
                    }        
                    if(result) {    
                        System.out.println("DIR created");  
                //----save the img
                        try {
                            BufferedImage bImage = ImageIO.read(this.src);
                            long [] timeAux = new long [9];
                            BufferedImage bImageFilter = new BufferedImage(bImage.getWidth(),bImage.getHeight(),
                                                  BufferedImage.TYPE_INT_RGB);
                            BufferedImage bImageGrayScale = new BufferedImage(bImage.getWidth(),bImage.getHeight(),
                                                  BufferedImage.TYPE_INT_RGB);
                            BufferedImage bImageDither = new BufferedImage(bImage.getWidth(),bImage.getHeight(),
                                                  BufferedImage.TYPE_INT_RGB);
                            bImageEqualize = new BufferedImage(bImage.getWidth(),bImage.getHeight(),
                                                  BufferedImage.TYPE_INT_RGB);
                            readTimeStart = System.nanoTime();
                            GaussianNoise newGN = new GaussianNoise(); // gauss filter
                            bImageFilter = newGN.proc(bImage,bImageFilter);
                            readTimeEnd = System.nanoTime();
                            timeAux[0] = (readTimeEnd - readTimeStart)/ 1000000;
                            ConvertToGS newGS = new ConvertToGS(); // convert to gray filter
                            bImageGrayScale = newGS.proc(bImageFilter,bImageGrayScale);
                            readTimeStart = System.nanoTime();
                            timeAux[1] = (readTimeStart - readTimeEnd)/ 1000000;
                     
                            EQ newEQ = new EQ();
                     //equilize
                            bImageEqualize = newEQ.proc(bImageGrayScale, bImageEqualize);
                            readTimeEnd = System.nanoTime();
                            timeAux[2] = (readTimeEnd - readTimeStart)/ 1000000;
                     //-----------hsto
                    
                     
                     
                            histo.display(bImageEqualize, whereToSave + "bImageEqualize.png", "Equalize Histo");
                            readTimeStart = System.nanoTime();
                            timeAux[3] = (readTimeStart - readTimeEnd)/ 1000000;
                            histo.display(bImageGrayScale, whereToSave + "bImageGrayScale.png", "GrayScale Histo");
                            readTimeEnd = System.nanoTime();
                            timeAux[4] = (readTimeEnd - readTimeStart)/ 1000000;
                     //============= hsto
                     
                     // save our imgs
                            ImageIO.write(bImageEqualize, "jpg", new File(whereToSave + "eqImg.jpg"));
                            readTimeStart = System.nanoTime();
                            timeAux[5] = (readTimeStart - readTimeEnd)/ 1000000;
                            ImageIO.write(bImageGrayScale, "jpg", new File(whereToSave + "GrayScaleImg.jpg"));
                            readTimeEnd = System.nanoTime();
                            timeAux[6] = (readTimeEnd - readTimeStart)/ 1000000;
                            ImageIO.write(bImageFilter, "jpg", new File(whereToSave + "filterImg.jpg"));
                            readTimeStart = System.nanoTime();
                            timeAux[7] = (readTimeStart - readTimeEnd)/ 1000000;
                            ImageIO.write(bImage, "jpg", new File(whereToSave + "initialImg.jpg"));
                            readTimeEnd = System.nanoTime();
                            timeAux[8] = (readTimeEnd - readTimeStart)/ 1000000;

                            jLabel1.setIcon(new ImageIcon(bImageEqualize.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH)));
                            jLabel2.setText(histo.fLabelPrintData(aux, timeAux[0],
                                          timeAux[1],
                                          timeAux[2],
                                          timeAux[3],
                                          timeAux[4],
                                          timeAux[5],
                                          timeAux[6],
                                          timeAux[7],
                                          timeAux[8]));
                            } catch (IOException e) {
                            System.out.println("Exception occured :" + e.getMessage());
                        }
                         System.out.println("Images were written succesfully.");
                
                    }
                }
            } 
        catch(NullPointerException e) 
        { 
            System.out.print("NullPointerException Caught"); 
            final JPanel panel = new JPanel();

            JOptionPane.showMessageDialog(panel, "Pls, select a img", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainApp().setVisible(true); //formul pentru aplicatia principala
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
